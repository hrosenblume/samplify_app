{
  "name": "plotly",
  "version": "0.2.13",
  "description": "Simple node.js wrapper for the plot.ly API",
  "main": "index.js",
  "devDependencies": {
    "random-signal": "0.0.2"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/alexander-daniel/plotly-nodejs.git"
  },
  "keywords": [
    "plotting",
    "graphs",
    "interactive",
    "data",
    "visualization"
  ],
  "author": {
    "name": "Alexander Daniel",
    "email": "alex@lesinstruments.com",
    "url": "http://lesinstruments.com/"
  },
  "license": "MIT",
  "dependencies": {
    "mkdirp": "~0.5.0"
  },
  "readme": "#Plotly Node API\n> Analyze and Visualize Data, Together\t\t\n\t\n\t\nIf you have a question about streaming let us know or open an issue!\t\n\n`ben@plot.ly` && `alexandre@plot.ly`\n\n## Streaming Plot Examples\n- [mock sensor stream](http://plot.ly/~streaming-demos/6/)\n- [math bar fight](http://plot.ly/~streaming-demos/44/)\n\n##Installation\n```javascript\nnpm install plotly\n```\n\n##Usage\n```javascript\nvar plotly = require('plotly')('username','apiKey');\n\nvar data = [{x:[], y:[], stream:{token:'yourStreamtoken', maxpoints:200}}];\nvar graphOptions = {fileopt : \"extend\", filename : \"nodenodenode\"};\n\nplotly.plot(data,graphOptions,function() {\n  var stream = plotly.stream('yourStreamtoken', function (res) {\n    console.log(res);\n  });\n  someReadableStream.pipe(stream);\n});\n```\n\n####Full REST API Documentation can be found here: [https://plot.ly/api/rest/](https://plot.ly/api/rest/)\n\nSign up for plotly here: [https://plot.ly/](https://plot.ly/) and obtain your API key and Stream Tokens in your plotly settings: [https://plot.ly/settings](https://plot.ly/settings). \n\n#Methods\n##var plotly = require('plotly')(username, apiKey)\n`username` is a string containing your username    \n`apiKey` is a string containing your API key   \n```javascript\nvar plotly = require('plotly')('username', 'apiKey');\n```\n\n##plotly.plot(data,graphOptions[, callback])\nPlotly graphs are described declaratively with a data JSON Object and a graphOptions JSON Object. \n`data` is an array of Objects and with each object containing data and styling information of separate graph traces. Docs: [https://plot.ly/api/rest](https://plot.ly/api/rest)  \n`graphOptions` is an Object containing styling options like axis information and titles for your graph. Docs: [https://plot.ly/api/rest](https://plot.ly/api/rest)  \n`callback(err,msg)` where `err` is an error Object, and `msg` is the return response Object\t\n\nThe `msg` object has the following attributes : `msg.url`,`msg.filename`,`msg.message`,`msg.warning`,`msg.error`\t\n```javascript\n// examples/rest-example.js\n\nvar plotly = require('plotly')('username','apiKey');\n\nvar data = [{x:[0,1,2], y:[3,2,1], type: 'bar'}];\nvar graphOptions = {fileopt : \"extend\", filename : \"nodenodenode\"};\n\nplotly.plot(data, graphOptions, function (err, msg) {\n\tconsole.log(msg);\n});\n```\n##var stream = plotly.stream(token[, callback])\n`token` accepts a token string   \n`callback(res)` where `res` is a the response object with the following attributes : `res.msg`, `res.statusCode`\n\n```javascript\n// examples/streaming-example.js\nvar plotly = require('plotly')('username','apiKey');\n\nvar initData = [{x:[], y:[], stream:{token:'token', maxpoints:200}}];\nvar initGraphOptions = {fileopt : \"extend\", filename : \"nodenodenode\"};\n\nplotly.plot(initData, initGraphOptions, function (err, msg) {\n  if (err) return console.log(err)\n  console.log(msg);\n\n  var stream1 = plotly.stream('token', function (err, res) {\n    console.log(err, res);\n    clearInterval(loop); // once stream is closed, stop writing\n  });\n\n  var i = 0;\n  var loop = setInterval(function () {\n      var streamObject = JSON.stringify({ x : i, y : i });\n      stream1.write(streamObject+'\\n');\n      i++;\n  }, 1000);\n});\n```\n\n[Live Streaming Example](https://plot.ly/~Streaming-Demos/6/)\n```javascript\n// examples/signal-stream.js\n\n/* If you have not signed up for Plotly you can do so using https://plot.ly\n * or see the example signup.js. Once you do, populate the config.json in this\n * example folder!\n */\nvar config = require('./config.json')\n  , username = config['user']\n  , apiKey = config['apiKey']\n  , token = config['token']\n  , Plotly = require('../.')(username, apiKey)\n  , Signal = require('random-signal')\n\n\n// build a data object - see https://plot.ly/api/rest/docs for information\nvar data = {\n    'x':[]   // empty arrays since we will be streaming our data to into these arrays\n  , 'y':[]\n  , 'type':'scatter'\n  , 'mode':'lines+markers'\n  , marker: {\n      color: \"rgba(31, 119, 180, 0.96)\"\n  }\n  , line: {\n      color:\"rgba(31, 119, 180, 0.31)\"\n  }\n  , stream: {\n      \"token\": token\n    , \"maxpoints\": 100\n  }\n}\n\n// build your layout and file options\nvar graphOptions = {\n    \"filename\": \"streamSimpleSensor\"\n  , \"fileopt\": \"overwrite\"\n  , \"layout\": {\n      \"title\": \"streaming mock sensor data\"\n  }\n  , \"world_readable\": true\n}\n\n/*\n * Call plotly.plot to set the file up.\n * If you have included a streaming token\n * you should get a \"All Streams Go!\" message\n */\n\nPlotly.plot(data, graphOptions, function (err, resp) {\n    if (err) return console.log(\"ERROR\", err)\n\n    console.log(resp)\n\n    var plotlystream = Plotly.stream(token, function () {})\n    var signalstream = Signal({tdelta: 100}) // \n\n\n    plotlystream.on(\"error\", function (err) {\n        signalstream.destroy()\n    })\n\n    // Okay - stream to our plot!\n    signalstream.pipe(plotlystream)\n})\n```\n\n\n##var plotly.getFigure(fileOwner, fileId[, callback])\n`file_ownder` accepts a string of the file owners name   \n`fileId` is an integer, representing the graph ID.\n`callback(figure)` where `figure` is a the JSON object of the graph figure.\n\n```javascript\nvar plotly = require('plotly')('username','apiKey');\n\nplotly.getFigure('fileOwner', 'fileId', function (err, figure) {\n    if (err) console.log(err);\n    console.log(figure);\n});\n```\n\n##var plotly.saveImage(figure, path[, callback])\n`figure` accepts a string of the file owners name   \n`path` is a string of the filepath and file name you wish to save the image as.\n`callback(err)` is a function, where `err` is an Error Object.\n```javascript\nvar plotly = require('plotly')('username','apiKey');\n\nvar trace1 = {\n  x: [1, 2, 3, 4], \n  y: [10, 15, 13, 17], \n  type: \"scatter\"\n};\n\nvar data = [trace1];\n\nplotly.saveImage({'data': data}, 'path/to/image_name', function (err) {\n  if (err) console.log(err);\n});\n```\n\n\nYou can also use `getFigure()` and `saveImage()` together! \n```javascript\nvar plotly = require('../.')('username','apiKey');\n\n// grab the figure from an existing plot\nplotly.getFigure('fileOwner', 'fileId', function (err, figure) {\n  if (err) console.log(err);\n  // now save that figure as a static image!\n  plotly.saveImage(figure, 'path/to/image_name', function (err) {\n    if (err) console.log(err);\n  });\n});\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/alexander-daniel/plotly-nodejs/issues"
  },
  "homepage": "https://github.com/alexander-daniel/plotly-nodejs",
  "_id": "plotly@0.2.13",
  "dist": {
    "shasum": "28029e15f6ed8f07897d246c64c307b1e15e1c1f"
  },
  "_from": "plotly@",
  "_resolved": "https://registry.npmjs.org/plotly/-/plotly-0.2.13.tgz"
}
